{"version":3,"sources":["logo.svg","components/UI/SpanningImage/SpanningImage.module.css","components/UI/SpanningImage/SpanningImage.js","containers/Pages/HomePage/HomePage.js","containers/Layout/Layout.js","App.js","serviceWorker.js","utils/FirebaseAPI.js","index.js"],"names":["module","exports","spanningImage","props","className","classes","SpanningImage","style","Borders","backgroundImage","src","Image","overlayStyle","Overlay","HomePage","backgroundColor","Component","Layout","App","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebaseContext","React","createContext","ReactDOM","render","Provider","value","app","initializeApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,kC,uCCC3CD,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,MAAQ,6BAA6B,QAAU,+BAA+B,QAAU,iC,kMCuBhJC,EArBO,SAACC,GAEnB,OACI,yBAAKC,UAAWC,IAAQC,cAAeC,MAAOJ,EAAMI,OAChD,yBAAKH,UAAWC,IAAQG,SACpB,yBAAKD,MAAO,CACRE,gBAAgB,OAAD,OAASN,EAAMO,IAAf,MAEnBN,UAAWC,IAAQM,QAClBR,EAAMS,aACP,yBAAKR,UAAWC,IAAQQ,QACxBN,MAAK,eACGJ,EAAMS,gBAIb,QC6BFE,E,iLA1CP,OACI,yBAAKV,UAAU,YACX,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBAAf,qBAIJ,6BACI,kBAACE,EAAD,CAAeI,IAAK,iKACpBE,aAAc,CACVG,gBAAgB,gBAIxB,6BACI,yBAAKX,UAAU,mBAAf,YAGA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,WAAf,sGAGA,yBAAKA,UAAU,WAAf,uRAKA,yBAAKA,UAAU,WAAf,wK,GAhCLY,aCcRC,G,uLAZP,OACI,yBAAKb,UAAU,UACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,a,GANHY,cCUNE,MARf,WACE,OACE,yBAAKd,UAAWC,IAAQa,KACtB,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCfOC,EAAS,CAClBC,OAAO,0CACPC,WAAW,wCACXC,YAAY,+CACZC,UAAU,wBACVC,cAAc,GACdC,kBAAkB,gBASTC,EAAkBC,IAAMC,cAAc,MCVnDC,IAASC,OACL,kBAAC,EAAgBC,SAAjB,CAA0BC,MAAO,IDIjC,aAAc,oBACVC,IAAIC,cAAcf,KCJlB,kBAAC,IAAD,KACI,kBAAC,EAAD,QAIVgB,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.60310b8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SpanningImage\":\"SpanningImage_SpanningImage__3WRtB\",\"Image\":\"SpanningImage_Image__3hLng\",\"Borders\":\"SpanningImage_Borders__8UGH_\",\"Overlay\":\"SpanningImage_Overlay__3hnSO\"};","import React from 'react';\r\nimport classes from './SpanningImage.module.css';\r\n\r\nconst spanningImage = (props) =>{\r\n\r\n    return(\r\n        <div className={classes.SpanningImage} style={props.style}>\r\n            <div className={classes.Borders}>\r\n                <div style={{\r\n                    backgroundImage: `url(${props.src})`\r\n                }}\r\n                className={classes.Image}/>\r\n                {props.overlayStyle? \r\n                <div className={classes.Overlay}\r\n                style={\r\n                    {...props.overlayStyle}\r\n                }> \r\n\r\n                </div>\r\n                :null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default spanningImage;","import React, { Component } from 'react';\r\nimport './HomePage.css';\r\nimport SpanningImage from '../../../components/UI/SpanningImage/SpanningImage';\r\n\r\nclass HomePage extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"homepage\">\r\n                <div className=\"bg-hue\">\r\n                </div> \r\n                <div className=\"overlay\">\r\n                    <div className=\"full-page\">\r\n                        <div className=\"homepage-title\">\r\n                            Cameron Hadfield\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <SpanningImage src={\"https://firebasestorage.googleapis.com/v0/b/personalwebsiteassets.appspot.com/o/images%2Flandscape_bg.png?alt=media&token=9544e1ee-5b96-449b-9f7e-5fea84f180b9\"}\r\n                        overlayStyle={{\r\n                            backgroundColor:\"#15244999\"\r\n                        }} \r\n                        ></SpanningImage>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"homepage-header\">\r\n                            About Me\r\n                        </div>\r\n                        <div className=\"homepage-body\">\r\n                            <div className=\"section\">\r\n                                My name is Cameron Hadfield and I currently attend the University of Waterloo for Computer Science\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                I have been programming since I was 10 years old, starting with a BASIC interpreter.\r\n                                When my dad introduced me to programming, I had only ever played video games, and always wanted to learn how to make my own.\r\n                                I decided to try my hand at a text-based adventure game in BASIC.\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                I tried my best, but eventually resolved to building chat bots\r\n                                that would respond with canned messages instead.\r\n                                I had no idea of the scope of making a game.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport HomePage from '../Pages/HomePage/HomePage';\r\nimport './Layout.css';\r\n\r\nclass Layout extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"layout\">\r\n                <div className=\"content-container\">\r\n                    <div className=\"layout-content\">\r\n                        <HomePage></HomePage>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Layout from './containers/Layout/Layout';\r\nimport classes from './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={classes.App}>\r\n      <Layout />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import app from 'firebase/app';\r\nimport React from 'react';\r\n\r\nexport const config = {\r\n    apiKey:\"AIzaSyDBo36Mworvq0FHWnbXVdaQ7f_q40D3uqM\",\r\n    authDomain:\"personalwebsiteassets.firebaseapp.com\",\r\n    databaseURL:\"https://personalwebsiteassets.firebaseio.com\",\r\n    projectId:\"personalwebsiteassets\",\r\n    storageBucket:\"\",\r\n    messagingSenderId:\"412723832129\"\r\n}\r\n\r\nexport class Firebase {\r\n    constructor(){\r\n        app.initializeApp(config);\r\n    }\r\n}\r\n\r\nexport const firebaseContext = React.createContext(null);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { firebaseContext as FirebaseContext, Firebase } from './utils/FirebaseAPI';\r\n\r\nReactDOM.render((\r\n    <FirebaseContext.Provider value={new Firebase()}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </FirebaseContext.Provider>\r\n                )\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}